/* Script generated by Pawn Studio */

#include <amxmodx>
#include <fun>
#include <cstrike>
#include <hamsandwich>
#include <fakemeta>
#include <reapi>
#include <zombie_escape_v1>

#define is_valid_player_alive(%0) (1 <= %0 <= MAX_PLAYERS && is_user_alive(%0))
#define rg_get_weapon_id(%0) get_member(get_member(get_member(%0, m_pPlayer), m_pActiveItem), m_iId)



#define MODEL_V "models/v_dual_finger1.mdl"
//#define MODEL_P "models/zp/p_ak47_zp.mdl"

#define NOMBRE "Dual Finger"
#define CATEGORIA SECUNDARIA
#define CSW CSW_ELITE
#define weapon "weapon_elite"


new g_item, bool:g_hasgun[33];
new g_maxplayers;
new bullets[33], m_spriteTexture;

public plugin_init()
{
	register_plugin(NOMBRE, "0.1", "Randro")
	// Add your own code here
	g_item = zp_arma(NOMBRE, 0, 3, CATEGORIA, ADMIN_ALL, "");

	RegisterHookChain( RG_CBasePlayerWeapon_DefaultDeploy,  "@fw_Deploy_Pre",  .post = false );
	RegisterHam(Ham_Spawn, "player", "fw_playerspawn_post", 1) 
	RegisterHam(Ham_TakeDamage, "player", "fw_TakeDamage_pre", 0)
	register_event("HLTV", "Event_NewRound", "a", "1=0", "2=0")
	register_event("CurWeapon", "make_tracer", "be", "1=1", "3>0")	
	g_maxplayers = get_maxplayers()

}

public plugin_precache()
{
	precache_model(MODEL_V)
	//precache_model(MODEL_P)
	m_spriteTexture = precache_model("sprites/dot.spr")

}




public fw_playerspawn_post(id)
{
	g_hasgun[id] = false;
}

public fw_TakeDamage_pre(victim, inflictor, attacker, Float:damage, damage_type)
{
	if (victim == attacker || !is_user_connected(attacker))
		return HAM_IGNORED;

	if(get_user_weapon(attacker) == CSW && g_hasgun[attacker])
	{
		damage *= 3
		SetHamParamFloat(4, damage)
	}

}


@fw_Deploy_Pre( const entity, sViewModel[], sWeaponModel[], iAnim, sAnimExt[], skiplocal )
{
	if( !is_entity( entity ) )
        return HC_CONTINUE;

   	new id = get_member( entity, m_pPlayer )
   	if(!g_hasgun[id] || !enable_skins(id))
		return HC_CONTINUE;
    
	if( is_valid_player_alive( id ) && rg_get_weapon_id(entity) == CSW)
	{

		SetHookChainArg(2, ATYPE_STRING, MODEL_V)
		//SetHookChainArg(3, ATYPE_STRING, MODEL_P)
        	
    }
        
	return HC_CONTINUE;
}

public dar_arma(id, item)
{
	if( g_item != item )
		return;
	g_hasgun[id] = true;
	give_item(id, weapon);
	cs_set_user_bpammo(id, CSW, 99);
	return;
}	

public Event_NewRound()
{
	for (new id = 1; id <= g_maxplayers; id++)
	{
		g_hasgun[id] = false
	}
}

public make_tracer(id)
{

		new clip,ammo
		new wpnid = get_user_weapon(id,clip,ammo)
		new pteam[16]
		
		get_user_team(id, pteam, 15)
		
		if ((bullets[id] > clip) && (wpnid == CSW) && g_hasgun[id]) 
		{
			new vec1[3], vec2[3]
			get_user_origin(id, vec1, 1) // origin; your camera point.
			get_user_origin(id, vec2, 4) // termina; where your bullet goes (4 is cs-only)
			
			
			//BEAMENTPOINTS
			message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
			write_byte (0)     //TE_BEAMENTPOINTS 0
			write_coord(vec1[0])
			write_coord(vec1[1])
			write_coord(vec1[2])
			write_coord(vec2[0])
			write_coord(vec2[1])
			write_coord(vec2[2])
			write_short( m_spriteTexture )
			write_byte(1) // framestart
			write_byte(5) // framerate
			write_byte(2) // life
			write_byte(10) // width
			write_byte(0) // noise
			write_byte( 0 )     // r, g, b
			write_byte( 225 )       // r, g, b
			write_byte( 0 )       // r, g, b
			write_byte(200) // brightness
			write_byte(150) // speed
			message_end()
		}
	
		bullets[id] = clip
	
}

public zp_user_infected_pre(id, infector, nemesis)
{
	g_hasgun[id] = false
}

public zp_user_humanized_pre(id, survivor)
{
	g_hasgun[id] = false
}

